CTRL + ALT + SHIFT + X  (to run all queries in new tabs)

    CREATE TABLE Departments (
        DeptID INT PRIMARY KEY,
        DeptName NVARCHAR(50)
    );

    INSERT INTO Departments (DeptID, DeptName) VALUES
    (1, 'IT'),
    (2, 'HR'),
    (3, 'Finance'),
    (4, 'Marketing');

-------------------------------------------------

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    EmployeeName VARCHAR(50),
    ManagerID INT NULL,
    DepartmentID INT
);

INSERT INTO Employees (EmployeeID, EmployeeName, ManagerID, DepartmentID)
VALUES
(1, 'Alice', NULL, 1),   -- Alice is the HR head
(2, 'Bob', 1, 1),        -- Bob reports to Alice
(3, 'Charlie', 1, NULL),    -- Charlie reports to Alice
(4, 'David', 3, 2),      -- David reports to Charlie
(5, 'Eva', 3, 5);        -- Eva reports to Charlie

------------------------------------------------

CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    CustomerName NVARCHAR(255) NOT NULL,
    ContactName NVARCHAR(255) NOT NULL,
    Address NVARCHAR(255),
    City NVARCHAR(100),
    PostalCode NVARCHAR(20),
    Country NVARCHAR(100)
);

INSERT INTO Customers (CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES
(1, 'Alfreds Futterkiste', 'Maria Anders', 'Obere Str. 57', 'Berlin', '12209', 'Germany'),
(2, 'Ana Trujillo Emparedados y helados', 'Ana Trujillo', 'Avda. de la Constitución 2222', 'México D.F.', '05021', 'Mexico'),
(3, 'Antonio Moreno Taquería', 'Antonio Moreno', 'Mataderos 2312', 'México D.F.', '05023', 'Mexico'),
(4, 'Around the Horn', 'Thomas Hardy', '120 Hanover Sq.', 'London', 'WA1 1DP', 'UK'),
(5, 'Berglunds snabbköp', 'Christina Berglund', 'Berguvsvägen 8', 'Luleå', 'S-958 22', 'Sweden'),
(6, 'The Horn', 'Thomas KOOK', '20 Hanover Sq.', 'London', 'WA1 1DP', 'UK');


------------------------------------------------------------

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName NVARCHAR(255) NOT NULL,
    SupplierID INT NOT NULL,
    CategoryID INT NOT NULL,
    Unit NVARCHAR(100),
    Price DECIMAL(10, 2)
);

-- Insert data
INSERT INTO Products (ProductID, ProductName, SupplierID, CategoryID, Unit, Price)
VALUES
(1, 'Chais', 1, 1, '10 boxes x 20 bags', 18.00),
(2, 'Chang', 1, 1, '24 - 12 oz bottles', 19.00),
(3, 'Aniseed Syrup', 1, 2, '12 - 550 ml bottles', 10.00),
(4, 'Chef Anton''s Cajun Seasoning', 2, 2, '48 - 6 oz jars', 22.00),
(5, 'Chef Anton''s Gumbo Mix', 2, 2, '36 boxes', 21.35);


----------------------------------------------------------

CREATE TABLE Employees_2024 (
    EmpID INT,
    EmpName VARCHAR(50)
);

INSERT INTO Employees_2024 (EmpID, EmpName)
VALUES
(1, 'Alice'),
(2, 'Bob'),
(3, 'Charlie');

---------------------------------------------

CREATE TABLE Employees_2025 (
    EmpID INT,
    EmpName VARCHAR(50)
);

INSERT INTO Employees_2025 (EmpID, EmpName)
VALUES
(2, 'Bob'),
(3, 'Charlie'),
(4, 'David');

---------------------------------------------------

CREATE TABLE Sales (
    SaleID INT PRIMARY KEY,
    ProductName VARCHAR(50),
    Category VARCHAR(50),
    Quantity INT,
    Price DECIMAL(10,2)
);

INSERT INTO Sales (SaleID, ProductName, Category, Quantity, Price) VALUES
(1, 'Laptop', 'Electronics', 2, 55000.00),
(2, 'Mouse', 'Electronics', 5, 500.00),
(3, 'Shirt', 'Clothing', 3, 800.00),
(4, 'Jeans', 'Clothing', 2, 1500.00),
(5, 'Mobile', 'Electronics', 4, 20000.00),
(6, 'Shoes', 'Footwear', 3, 3000.00);

------------------------------------------------

SELECT *
  FROM Departments


SELECT *
  FROM Employees


------------------------------------------------------
--Inner JOIN
SELECT e.EmployeeID, e.EmployeeName, d.DeptName
FROM Employees e
INNER JOIN Departments d
    ON e.DepartmentID = d.DeptID;

--Only employees whose DeptID exists in Departments

-----------------------------------------------------
--LEFT JOIN
SELECT e.EmployeeID, e.EmployeeName, d.DeptName
FROM Employees e
LEFT JOIN Departments d
    ON e.DepartmentID = d.DeptID;

--Returns all rows from the left table (Employees) and the matched records from the right table
--All employees, with DeptName NULL if no department.


---------------------------------------------------------
--Right Join

SELECT e.EmployeeID, e.EmployeeName, d.DeptName
FROM Employees e
RIGHT JOIN Departments d
    ON e.DepartmentID = d.DeptID;

--Returns all rows from right table (Departments) and the matched records from the left table


--------------------------------------

--Full OUTER JOIN

SELECT e.EmployeeID, e.EmployeeName, d.DeptName
FROM Employees e
FULL OUTER JOIN Departments d
    ON e.DepartmentID = d.DeptID;

--Combination of LEFT + RIGHT join.
--Returns all rows from both tables; NULLs where no match

---------------------------------------
--SELF JOIN
SELECT 
    e.EmployeeID,
    e.EmployeeName AS Employee,
    m.EmployeeName AS Manager,
    d.DeptName
FROM Employees e
LEFT JOIN Employees m
    ON e.ManagerID = m.EmployeeID
INNER JOIN Departments d
    ON e.DepartmentID = d.DeptID;

--Employees e → main table for employees.
--Employees m → same table but representing managers.

----------------------------------------

SELECT * from Employees ORDER BY EmpName DESC			--ORDER BY
SELECT * from Customers c WHERE c.ContactName = 'Maria Anders'		--WHERE
SELECT * from Customers c WHERE c.Country = 'Mexico' and c.CustomerID > 2		--AND
SELECT * from Customers c WHERE c.Country = 'Mexico' OR c.Country = 'UK'			--OR
SELECT COUNT(DISTINCT Country) from Customers			--DISTINCT COUNT BASED ON Countries
SELECT DISTINCT Country from Customers					--DISTICT COUNTRY
SELECT c.Country, COUNT(*) AS TotalCustomers FROM Customers c
GROUP BY c.Country
HAVING COUNT(*) > 1;
SELECT * FROM Customers WHERE NOT Country = 'Mexico';		--NOT (Select only the customers that are NOT from Mexico)
SELECT * from Employees WHERE DeptID IS NULL			--IS NULL
UPDATE Customers SET ContactName = 'Ritik Chauhan', City= 'Sonipat' WHERE CustomerID = 1;		--UPDATE QUERY
DELETE FROM Customers WHERE CustomerName='The Horn';			--DELETE QUERY
SELECT * FROM Products WHERE Price NOT BETWEEN 10 AND 20;
DROP TABLE Employees;			--DROP a table

SELECT EmpID, EmpName FROM Employees_2024
UNION		--Combines results from two or more SELECT statements.Removes duplicate rows (so little slow)
SELECT EmpID, EmpName FROM Employees_2025;

SELECT EmpID, EmpName FROM Employees_2024
UNION ALL	--Keeps duplicates.
SELECT EmpID, EmpName FROM Employees_2025;

SELECT Category, SUM(Quantity) AS TotalQuantity			--GROUP BY
FROM Sales
GROUP BY Category;

SELECT Category, SUM(Quantity) AS TotalQuantity			--HAVING
FROM Sales
GROUP BY Category
HAVING SUM(Quantity) > 5;






--------------------------------------------------------------DBEAVER-----------------------------------------
CREATE TABLE Departments(DeptID INT PRIMARY KEY,DeptName NVARCHAR(100))
INSERT INTO Departments (DeptID,DeptName) VALUES (1, 'IT'),
(2, 'HR'),
(3, 'Finance'),
(4, 'Marketing')
SELECT * from Departments 
TRUNCATE TABLE Customers;
DROP TABLE Departments;
UPDATE Departments SET DeptName = 'IT' WHERE DeptID = 1;
UPDATE d SET d.DeptName = 'ITR' FROM Departments d WHERE d.DeptID = 1;		--aliased version
DELETE from Departments WHERE DeptID = 5
ALTER TABLE Employees ADD CONSTRAINT fk_Department 
FOREIGN KEY (DepartmentID) REFERENCES Departments(DeptID);	--adding FK
ALTER TABLE Products ADD CONSTRAINT chk_Price CHECK (Price > 0);	--Ensures that the column Price must always be greater than 0

SELECT * from Departments 
SELECT * from Employees
SELECT * from Customers
SELECT * from Products
SELECT * from Employees_2024
SELECT * from Employees_2025
SELECT * from Sales








-------------------------------------------------------------------------------
SELECT d.DeptName,e.EmployeeName ,e.EmployeeID,e.DepartmentID,d.DeptID
from Employees e INNER JOIN Departments d ON e.DepartmentID = d.DeptID


SELECT e.EmployeeID ,e.EmployeeName,d.DeptName,e.DepartmentID,d.DeptID from Employees e
LEFT JOIN Departments d ON e.DepartmentID = d.DeptID


SELECT e.EmployeeID ,e.EmployeeName,d.DeptName,e.DepartmentID,d.DeptID from Employees e
RIGHT JOIN Departments d ON e.DepartmentID = d.DeptID


SELECT e.EmployeeID ,e.EmployeeName,d.DeptName,e.DepartmentID,d.DeptID from Employees e
FULL OUTER  JOIN Departments d ON e.DepartmentID = d.DeptID


SELECT e.EmployeeID,e.EmployeeName,d.DeptName,e.DepartmentID,d.DeptID from Employees e
LEFT JOIN Employees m on e.ManagerID = m.EmployeeID 
INNER JOIN Departments d on e.DepartmentID = d.DeptID


-------------------------------------------------------------------------------------------------

Select * from Employees e ORDER BY e.EmployeeName ASC;
Select * from Employees e WHERE e.EmployeeID = 5;
Select * from Customers c WHERE c.Country = 'Mexico' AND c.CustomerID = 2
Select * from Customers c WHERE c.Country = 'Mexico' OR c.Country  = 'UK'
Select * from Customers c WHERE c.Country IN ('Mexico','UK');
Select COUNT(*) from Customers c;
SELECT DISTINCT c.Country from Customers c;
Select COUNT(DISTINCT c.Country) from Customers c;
SELECT c.Country, COUNT(*) AS TotalCustomers FROM Customers c
GROUP BY c.Country
HAVING COUNT(*) > 1;
Select * from Customers c WHERE NOT c.Country = 'UK'
Select * from Customers c WHERE c.Country != 'UK';
SELECT * from Employees e WHERE e.DepartmentID IS NULL
SELECT * FROM Products p WHERE p.Price NOT BETWEEN 10 AND 20;
SELECT EmpID,EmpName from Employees_2024 e UNION
SELECT EmpID,EmpName from Employees_2025;
SELECT EmpID,EmpName from Employees_2024 e UNION ALL
SELECT EmpID,EmpName from Employees_2025;
SELECT s.Category,COUNT(*) AS TotalProducts FROM Sales s GROUP BY s.Category
SELECT s.Category, MIN(s.Price) AS MinPrice FROM Sales s GROUP BY s.Category;		--Cheapest product








CREATE TABLE Employees_Salary (
    EmployeeID INT PRIMARY KEY,
    EmployeeName NVARCHAR(100),
    DepartmentID INT,
    Salary DECIMAL(10,2),
    ManagerID INT NULL
);


INSERT INTO Employees_Salary (EmployeeID, EmployeeName, DepartmentID, Salary, ManagerID)
VALUES 
(1, 'Alice', 1, 75000.00, NULL),
(2, 'Bob', 1, 50000.00, 1),
(3, 'Charlie', 1, 60000.00, 1),
(4, 'David', 2, 80000.00, NULL),
(5, 'Eva', 2, 55000.00, 4),
(6, 'Frank', 2, 70000.00, 4),
(7, 'Grace', 3, 40000.00, NULL),
(8, 'Hannah', 3, 45000.00, 7),
(9, 'Ian', 3, 30000.00, 7);



--1. Subqueries & Correlated Subqueries
-- Find employees who earn more than the average salary
SELECT EmployeeName, Salary
FROM Employees_Salary e
WHERE Salary > (SELECT AVG(Salary) FROM Employees_Salary);

--Correlated subquery: Find employees earning more than their department's avg
SELECT EmployeeName, DepartmentID, Salary
FROM Employees_Salary e
WHERE Salary > (
    SELECT AVG(Salary) 
    FROM Employees_Salary e2 
    WHERE e2.DepartmentID = e.DepartmentID
);



--2.Window Functions
-- Rank employees by salary within each department
SELECT EmployeeName, DepartmentID, Salary,
       RANK() OVER(PARTITION BY DepartmentID ORDER BY Salary DESC) AS SalaryRank
FROM Employees_Salary;


--3.TOP / OFFSET-FETCH (Pagination)
-- Top 5 highest-paid employees
SELECT TOP 5 EmployeeName, Salary
FROM Employees_Salary
ORDER BY Salary DESC;

-- Pagination: 6th to 10th highest-paid employees
SELECT EmployeeName, Salary
FROM Employees_Salary
ORDER BY Salary DESC
OFFSET 5 ROWS FETCH NEXT 5 ROWS ONLY;


--4. Common Table Expressions (CTE)
-- CTE for average salary per department
WITH DeptAvg AS (
    SELECT DepartmentID, AVG(Salary) AS AvgSalary
    FROM Employees_Salary
    GROUP BY DepartmentID
)
SELECT e.EmployeeName, e.Salary, d.AvgSalary
FROM Employees_Salary e
JOIN DeptAvg d ON e.DepartmentID = d.DepartmentID
WHERE e.Salary > d.AvgSalary;


--5. CASE Expression 
-- Categorize employees based on salary
SELECT EmployeeName, Salary,
       CASE 
         WHEN Salary > 80000 THEN 'High'
         WHEN Salary BETWEEN 50000 AND 80000 THEN 'Medium'
         ELSE 'Low'
       END AS SalaryBand
FROM Employees_Salary;

--6.String Functions
-- Employees whose name starts with 'A'
SELECT * FROM Employees_Salary WHERE EmployeeName LIKE 'A%';

-- Combine first and last name
SELECT CONCAT(EmployeeName, ' ', Salary) AS FullName FROM Employees_Salary;





-- Second highest salary
SELECT MAX(Salary) AS SecondHighestSalary
FROM Employees_Salary
WHERE Salary < (SELECT MAX(Salary) FROM Employees_Salary);



-- Employees who earn the max salary in each department
SELECT e.EmployeeName, e.DepartmentID, e.Salary
FROM Employees_Salary e
WHERE e.Salary = (
    SELECT MAX(Salary) 
    FROM Employees_Salary 
    WHERE DepartmentID = e.DepartmentID
);












-------------------------------------------------------------------ADVANCED------------------------------------

1. Views
Definition: A view is a virtual table based on the result of a query. It doesn’t store data physically (except Indexed Views) but pulls it from base tables.
Usage: Mainly for data abstraction, reusability, and security (you can restrict columns/rows).
Return type: Always returns a result set (like a table).
Parameters: Cannot accept parameters (in SQL Server).
Transaction: Cannot handle business logic or transactions.
Modification: Can sometimes be used to update/insert/delete data if the view is updatable (but not always).


Stored Procedure
Definition: A stored procedure is a set of SQL statements stored in the database and executed as a unit.
Usage: Used for business logic, data manipulation, transactions, and complex operations.
Return type: Can return:
No value
Multiple result sets
Output parameters
Status code (integer)
Parameters: Accepts input, output, and default parameters.
Transaction support: Yes, you can use BEGIN TRANSACTION, COMMIT, ROLLBACK.
Performance: Precompiled, so runs faster.


3.Functions
Definition: A function is a routine that returns a value (scalar or table).
Types:
Scalar Function → Returns a single value (e.g., string, number, date).
Table-Valued Function → Returns a table (can be used like a view).
Usage: For calculations, reusable expressions, and returning values inside queries.
Return type: Must return exactly one value (scalar) or one table (table-valued).
Parameters: Must have at least one input parameter (no output params).
Transaction support: Cannot use TRY…CATCH, COMMIT, ROLLBACK inside functions.



CREATE VIEW ActiveEmployees
AS
SELECT *
FROM Employees_Salary
WHERE Salary > 50000;


Select * from ActiveEmployees


CREATE PROCEDURE GetEmployeesByDept 
    @DeptID INT
AS
BEGIN
    SELECT 
        es.EmployeeID,
        es.EmployeeName,
        es.Salary,
        es.DepartmentID,
        d.DeptID,
        d.DeptName
    FROM Employees_Salary es
    INNER JOIN Departments d 
        ON es.DepartmentID = d.DeptID
    WHERE d.DeptID = @DeptID;
END;


EXEC GetEmployeesByDept @DeptID = 1;




CREATE FUNCTION GetFullName (@EmployeeName NVARCHAR(50), @DeptName NVARCHAR(50))
RETURNS NVARCHAR(100)
AS
BEGIN
    DECLARE @FullName NVARCHAR(100);
    SET @FullName = @EmployeeName + ' ' + @DeptName;
    RETURN @FullName;
END;


SELECT dbo.GetFullName(EmployeeName, DeptName)
FROM Employees e
JOIN Departments d ON e.DepartmentID = d.DeptID;








BEGIN TRY
    -- Example: Insert a new Department
    INSERT INTO Departments (DeptID, DeptName)
    VALUES (10, 'Research');

    -- Example: Insert a new Employee under that Department
    INSERT INTO Employees (EmployeeID, EmployeeName, DepartmentID)
    VALUES (101, 'John Doe', 10);

    -- ✅ Commit if both succeed
    COMMIT TRANSACTION;
    PRINT 'Transaction committed successfully.';
END TRY
BEGIN CATCH
    -- ❌ Rollback if error occurs
    ROLLBACK TRANSACTION;
    PRINT 'Error occurred, transaction rolled back.';
END CATCH;




BEGIN TRY
    -- This will fail if DeptID 99 does not exist
    INSERT INTO Employees (EmployeeID, EmployeeName, DepartmentID)
    VALUES (102, 'Jane Smith', 99);

    PRINT 'Employee inserted successfully.';
END TRY
BEGIN CATCH
    PRINT 'An error occurred!';
    PRINT ERROR_MESSAGE();   -- Show the actual SQL Server error
END CATCH;